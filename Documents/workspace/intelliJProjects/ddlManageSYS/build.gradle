apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
//apply plugin: 'sonar-runner'

version = '0.1'


/*
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "root"
        property "sonar.jdbc.password", ""
    }

}
*/

repositories {
    mavenCentral()
}


dependencies {

    //test source编译依赖
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-unitils:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-tapestry:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-maven:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-guice:0.7-groovy-2.0'


    testCompile group: 'org.testng', name: 'testng', version: '6.7'
    testCompile "org.mockito:mockito-all:1.9.5"
    //source编译依赖
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0.2'
    compile 'org.springframework:spring-context:4.1.0.RELEASE'
    compile 'org.mybatis:mybatis:3.2.7'
    compile 'org.mybatis:mybatis-spring:1.2.2'
    compile 'org.apache.httpcomponents:httpclient-win:4.4-alpha1'
    compile 'org.apache.httpcomponents:httpclient-osgi:4.4-alpha1'
    compile 'org.apache.httpcomponents:httpclient:4.4-alpha1'
    compile 'org.apache.httpcomponents:httpclient-cache:4.4-alpha1'

    providedCompile group: 'javax',name:'javaee-api',version:'7.0'
}


//sonar staffs

ext {
    // ajust as you see fit
    sonarProjects = subprojects
    sonarProjectPropertiesFile = new File(project.buildDir, 'sonar/sonar-project.properties')
}

configurations {
    sonarRunner
    sonarProjectDependencies
}

dependencies {
    sonarRunner(group: 'org.codehaus.sonar.runner', name: 'sonar-runner-dist', version: '2.4', ext: 'zip')
    project.sonarProjects.each {
        owner.sonarProjectDependencies(project(it.path))
    }
}

task unpackSonarRunner(type: Copy) {
    from { zipTree { configurations.sonarRunner.singleFile } }
    into "${project.buildDir}/sonar-runner"
    doLast {
        Properties properties = new Properties()
        properties['sonar.host.url'] = 'http://localhost:9000'
        properties['sonar.jdbc.url'] = 'jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true'
        properties['sonar.jdbc.driverClassName'] = 'com.mysql.jdbc.Driver'
        properties['sonar.jdbc.username'] = 'root'
        properties['sonar.jdbc.password'] =''

        new File(project.buildDir, 'sonar-runner/sonar-runner-2.4/conf/sonar-runner.properties').withWriter { writer ->
            properties.store(writer, "Sonar Runner Properties")
        }
    }
}

task createSonarProjectProperties() {
//    outputs.file sonarProjectPropertiesFile
}

createSonarProjectProperties << {
    Properties sonarProjectProps = new Properties()
    sonarProjectProps['sonar.projectKey'] = 'DDL'
    sonarProjectProps['sonar.projectName'] = 'ddlManageSYS'
    sonarProjectProps['sonar.projectVersion'] = project.version
    // due to classes in wrong packages
    // sonarProjectProps['sonar.skipPackageDesign'] = 'true'
    // Tells SonarQube to reuse existing reports for unit tests execution and coverage reports
    sonarProjectProps['sonar.dynamicAnalysis'] = 'reuseReports'
    // Tells SonarQube that the code coverage tool by unit tests is JaCoCo
    sonarProjectProps['sonar.java.coveragePlugin'] = 'jacoco'
    // Tells SonarQube where the integration tests code coverage report is
    // sonarProjectProps['sonar.jacoco.itReportPath'] = 'reports/jacoco/jacoco-it.exec'
    sonarProjectProps['sonar.modules'] = sonarProjects.collect { it.name }.join(',')
    sonarProjects.each {
        sonarProjectProps["${it.name}.sonar.sources".toString()] = it.sourceSets.main.java.srcDirs.collect { it.absolutePath }.join(',')
        if (it.sourceSets.test.java.srcDirs.every { it.exists() }) {
            sonarProjectProps["${it.name}.sonar.tests".toString()] = it.sourceSets.test.java.srcDirs.collect { it.absolutePath }.join(',')
        }
        if (it.sourceSets.main.output.classesDir.exists()) {
            sonarProjectProps["${it.name}.sonar.binaries".toString()] = it.sourceSets.main.output.classesDir.absolutePath
        }
        // Tells SonarQube where the unit tests code coverage report is
        sonarProjectProps["${it.name}.sonar.jacoco.reportPath".toString()] = "${it.buildDir}/jacoco/jacocoTest.exec".toString()
        // Tells SonarQube where the unit tests execution reports are
        sonarProjectProps["${it.name}.sonar.junit.reportsPath".toString()] = it.testResultsDir.absolutePath
        // our project names have slash in them and sonar doesn't like it
        sonarProjectProps["${it.name}.sonar.projectKey".toString()] = it.name.replaceAll('/', '.')
        sonarProjectProps["${it.name}.sonar.projectName".toString()] = it.name
        sonarProjectProps["${it.name}.sonar.sources".toString()] = new File(it.projectDir, 'src/main/java').absolutePath
    }
    sonarProjectPropertiesFile.parentFile.mkdirs()
    sonarProjectProps.store(sonarProjectPropertiesFile.newDataOutputStream(), 'Sonar Project Properties')
}

task sonar(type: Exec, dependsOn: [ unpackSonarRunner, createSonarProjectProperties, configurations.sonarProjectDependencies ]) {
    executable = "${project.buildDir}/sonar-runner/sonar-runner-2.4/bin/sonar-runner"
    args "-Dproject.settings=${sonarProjectPropertiesFile.absolutePath}"
    environment 'SONAR_RUNNER_OPTS',  '-Xmx2048m'
}
